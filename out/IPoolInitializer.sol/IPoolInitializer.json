{"abi":[{"type":"function","name":"createAndInitializePoolIfNecessary","inputs":[{"name":"token0","type":"address","internalType":"address"},{"name":"token1","type":"address","internalType":"address"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"sqrtPriceX96","type":"uint160","internalType":"uint160"}],"outputs":[{"name":"pool","type":"address","internalType":"address"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":"13ead562"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Uniswap (@Uniswap).\",\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"IPoolInitializer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Lifted from          https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity-pool/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@gelato/=lib/relay-context-contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pyth/=lib/pyth-sdk-solidity/\",\":@uniswap/=lib/v3-periphery/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\"]},\"sources\":{\"contracts/liquidity-pool/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x74d2d1a1ab947ab7c876b1ca8798e9e9ca0170b39abe952c87d5a20ff0bf8c92\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d44947570004cdd5e24bbabe0cf79aadc46a92ed24095b55e96330118e75bc66\",\"dweb:/ipfs/QmTxd2m1dvkNPDsGrk6w36rxAvt3sLiBFTqeqGMtPrnU1J\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"stateMutability":"payable","type":"function","name":"createAndInitializePoolIfNecessary","outputs":[{"internalType":"address","name":"pool","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"details":"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool","params":{"fee":"The fee amount of the v3 pool for the specified token pair","sqrtPriceX96":"The initial square root price of the pool as a Q64.96 value","token0":"The contract address of token0 of the pool","token1":"The contract address of token1 of the pool"},"returns":{"pool":"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"}}},"version":1},"userdoc":{"kind":"user","methods":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"notice":"Creates a new pool if it does not exist, then initializes if not initialized"}},"version":1}},"settings":{"remappings":["@gelato/=lib/relay-context-contracts/","@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pyth/=lib/pyth-sdk-solidity/","@uniswap/=lib/v3-periphery/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/liquidity-pool/interfaces/IPoolInitializer.sol":"IPoolInitializer"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/liquidity-pool/interfaces/IPoolInitializer.sol":{"keccak256":"0x74d2d1a1ab947ab7c876b1ca8798e9e9ca0170b39abe952c87d5a20ff0bf8c92","urls":["bzz-raw://d44947570004cdd5e24bbabe0cf79aadc46a92ed24095b55e96330118e75bc66","dweb:/ipfs/QmTxd2m1dvkNPDsGrk6w36rxAvt3sLiBFTqeqGMtPrnU1J"],"license":"GPL-3.0"}},"version":1},"id":13}